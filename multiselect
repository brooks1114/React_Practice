import { Page } from '@playwright/test';

async function multiSelectOptions(
    page: Page,
    columnIndex: number,
    optionIndices: number[]
): Promise<void> {
    // Locate the specific column's selection box based on the column index
    const columnSelector = `div[data-column-index="${columnIndex}"] .selection-box`;

    // Get all options within the selection box
    const optionsSelector = `${columnSelector} .option`;
    const options = await page.$$(optionsSelector);

    // Ensure valid indices
    if (optionIndices.some(index => index < 0 || index >= options.length)) {
        throw new Error('Invalid option index passed to the function');
    }

    // Hold down the CTRL key and click the options
    for (const index of optionIndices) {
        await page.keyboard.down('Control'); // Press and hold CTRL
        await options[index].click();       // Click the specific option
    }
    // Release the CTRL key
    await page.keyboard.up('Control');
}

export { multiSelectOptions };


// usage
// import { test, expect } from '@playwright/test';
// import { multiSelectOptions } from './multiSelectOptions';

// test('Multi-select options in a specific column', async ({ page }) => {
//     await page.goto('https://example.com'); // Replace with your application URL

//     // Multi-select options in column 2 (indices 1, 3, and 5)
//     await multiSelectOptions(page, 2, [1, 3, 5]);

//     // Perform assertions or further actions if necessary
// });

// Replace the div[data - column - index= "${columnIndex}"]and.option selectors with ones that match your applicationâ€™s DOM structure.
// Ensure all elements are visible and interactable when calling the function. Use await page.waitForSelector() or other synchronization methods if necessary.